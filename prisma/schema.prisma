generator client {
  provider = "prisma-client-js"
}

generator fieldEncryptionMigrations {
  provider = "prisma-field-encryption"
  output   = "./migrations"
}

datasource db {
  provider = "postgresql"
  url = env("SUPABASE_DB_URL")
  shadowDatabaseUrl = env("SUPABASE_SHADOW_DB_URL")
}

//-------------------------------------------ENUMS-DEFINITIONS

enum Roles {
  USER
  ADMIN
}

enum Modules {
  INCOMES
  EXPENSES
  INVESTMENTS
  SUBSCRIPTIONS
  DEBTS
  LENDS
  REPORTS
}

//-------------------------------------------USERS-LEVEL-ENTITIES

model users {
  id                         String          @id @db.Uuid
  email                      String          @unique
  /// @encrypted
  name                       String
  /// @encrypted
  notes                      String?
  name_hash                  String?
  role                       Roles            @default(USER)
  order_identifier           String?
  order_store_id             String?
  order_number               String?
  order_status               String?
  billing_start_date         String?
  plan_status                String          @default("basic")
  trial_start_date           DateTime        @default(now()) @db.Timestamptz(6)
  usage                      Int             @default(0)
  basic_usage_limit_email    Boolean         @default(false)
  new_signup_email           Boolean         @default(false)
  premium_plan_expired_email Boolean         @default(false)
  premium_usage_limit_email  Boolean         @default(false)
  feedbacks                  feedbacks[]
  profiles                   profiles[]
  notifiers                  notifiers[]
  created_at                 DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
}

model feedbacks {
  id                         Int             @id @default(autoincrement())
  message                    String
  user_id                    String          @db.Uuid
  user                       users           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at                 DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
}

model notifiers {
  id                         Int             @id @default(autoincrement())
  /// @encrypted
  name                       String
  /// @encrypted
  notes                      String?
  name_hash                  String?
  user_id                    String          @db.Uuid
  user                       users           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  profile_id                 String          @db.Uuid
  profiles                   profiles        @relation(fields: [profile_id], references: [id])
  notify_date                DateTime
  enabled                    Boolean         @default(false)
  completed                  Boolean         @default(false)
  repeat                     Boolean?        @default(false)
  created_at                 DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
}

model profiles {
  id                         String          @id @default(uuid()) @db.Uuid
  user_id                    String          @db.Uuid
  user                       users           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  /// @encrypted
  name                       String
  /// @encrypted
  notes                      String?
  name_hash                  String?
  currency                   String          @default("INR")
  locale                     String          @default("en")
  monthly_email_report       Boolean         @default(false)
  incomes                    incomes[]
  expenses                   expenses[]
  debts                      debts[]
  lends                      lends[]
  investements               investments[]
  subscriptions              subscriptions[]
  categories                 categories[]
  reports                    reports[]
  notifers                   notifiers[]
  created_at                 DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
}

//-------------------------------------------PROFILES-LEVEL-ENTITIES

model incomes {
  id                         String          @id @default(uuid())
  profile_id                 String          @db.Uuid
  profiles                   profiles        @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  /// @encrypted
  name                       String
  /// @encrypted
  notes                      String?
  /// @encrypted
  amount                     String          @default("0")
  name_hash                  String?
  category_id                Int?
  category                   categories?     @relation(fields: [category_id], references: [id])
  created_at                 DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
}

model expenses {
  id                         String          @id @default(uuid())
  profile_id                 String          @db.Uuid
  profile                    profiles        @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  /// @encrypted
  name                       String
  /// @encrypted
  notes                      String?
  /// @encrypted
  amount                     String          @default("0")
  name_hash                  String?
  paid_via                   String          @default("")
  category_id                Int?
  category                   categories?     @relation(fields: [category_id], references: [id])
  created_at                 DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
}

model debts {
  id                         String          @id @default(uuid())
  profile_id                 String          @db.Uuid
  profile                    profiles        @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  /// @encrypted
  name                       String
  /// @encrypted
  notes                      String?
  /// @encrypted
  amount                     String          @default("0")
  name_hash                  String?
  category_id                Int?
  category                   categories?     @relation(fields: [category_id], references: [id])
  created_at                 DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
}

model lends {
  id                         String          @id @default(uuid())
  profile_id                 String          @db.Uuid
  profile                    profiles        @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  /// @encrypted
  name                       String
  /// @encrypted
  notes                      String?
  /// @encrypted
  amount                     String          @default("0")
  name_hash                  String?
  category_id                Int?
  category                   categories?     @relation(fields: [category_id], references: [id])
  created_at                 DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
}

model investments {
  id                         String          @id @default(uuid())
  profile_id                 String          @db.Uuid
  profile                    profiles        @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  /// @encrypted
  name                       String
  /// @encrypted
  notes                      String?
  /// @encrypted
  amount                     String          @default("0")
  /// @encrypted
  units                      String          @default("0")
  name_hash                  String?
  category_id                Int?
  category                   categories?     @relation(fields: [category_id], references: [id])
  created_at                 DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
}

model subscriptions {
  id                         String          @id @default(uuid())
  profile_id                 String          @db.Uuid
  profile                    profiles        @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  /// @encrypted
  name                       String
  /// @encrypted
  notes                      String?
  /// @encrypted
  amount                     String          @default("0")
  paid                       String
  url                        String?
  name_hash                  String?
  notify                     Boolean         @default(false)
  start_date                 DateTime
  end_date                   DateTime
  active                     Boolean?        @default(true)
  cancelled_at               String?
  category_id                Int?
  category                   categories?     @relation(fields: [category_id], references: [id])
  created_at                 DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
}

model reports {
  id                         String          @id @default(uuid())
  profile_id                 String          @db.Uuid
  profile                    profiles        @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  /// @encrypted
  name                       String
  /// @encrypted
  notes                      String?
  /// @encrypted
  amount                     String          @default("0")
  name_hash                  String?
  category_id                Int?
  category                   categories?     @relation(fields: [category_id], references: [id])
  start_date                 DateTime
  end_date                   DateTime
  created_at                 DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
}

//-------------------------------------------GENERIC-GROUPING-ENTITY-PROFILES-LEVEL

model categories {
  id                         Int             @id @default(autoincrement())
  profile_id                 String          @db.Uuid
  profile                    profiles        @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  /// @encrypted
  name                       String
  /// @encrypted
  notes                      String?
  name_hash                  String?
  module_type                Modules
  incomes                    incomes[]
  expenses                   expenses[]
  subscriptions              subscriptions[]
  investments                investments[]
  lends                      lends[]
  debts                      debts[]
  reports                    reports[]
  created_at                 DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
}

//TODO--------------------------------------[BANK-ACCOUNTS--TRANSACTIONS]-USERS-LEVEL